{"version":3,"sources":["components/Navbar/Navbar.js","components/EmployeeInfoRow/EmployeeInfoRow.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","class","type","placeholder","aria-label","Component","EmployeeInfoRow","props","d","Date","dob","date","formatted_date","getDate","getMonth","getFullYear","src","picture","alt","name","first","last","email","phone","Table","scope","employees","map","key","login","uuid","id","thumbnail","cell","App","state","employeesData","search","sortNameAsc","sortEmailAsc","sortPhoneAsc","sortDOBAsc","axios","get","then","res","setState","data","results","catch","err","console","log","className","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8SAgBeA,G,6KAZP,OACI,yBAAKC,MAAM,gCACP,0BAAMA,MAAM,wBAAZ,sBACA,0BAAMA,MAAM,4BACR,2BAAOA,MAAM,uBAAuBC,KAAK,SAASC,YAAY,SAASC,aAAW,WAClF,4BAAQH,MAAM,uCAAuCC,KAAK,UAA1D,gB,GAPCG,cCgBNC,MAhBf,SAAyBC,GACrB,IAAIC,EAAI,IAAIC,KAAKF,EAAMG,IAAIC,MACvBC,EAAiBJ,EAAEK,UAAY,KAAOL,EAAEM,WAAa,GAAK,IAAMN,EAAEO,cAEtE,OACI,4BACI,4BAAI,yBAAKC,IAAKT,EAAMU,QAASC,IAAI,cACjC,4BAAKX,EAAMY,KAAKC,MAAhB,IAAwBb,EAAMY,KAAKE,MACnC,4BAAKd,EAAMe,OACX,4BAAKf,EAAMgB,OACX,4BAAKX,KCsBFY,MA/Bf,SAAejB,GACX,OACI,yBAAKN,MAAM,oBACP,2BAAOA,MAAM,SACT,+BACI,4BACI,wBAAIwB,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QAAqB,uBAAGxB,MAAM,iBAC9B,wBAAIwB,MAAM,OAAV,SAAsB,uBAAGxB,MAAM,iBAC/B,wBAAIwB,MAAM,OAAV,SAAsB,uBAAGxB,MAAM,iBAC/B,wBAAIwB,MAAM,OAAV,OAAoB,uBAAGxB,MAAM,mBAGrC,+BACKM,EAAMmB,UAAUC,KAAI,SAAAD,GAAS,OAC1B,kBAAC,EAAD,CACIE,IAAKF,EAAUG,MAAMC,KACrBC,GAAIL,EAAUG,MAAMC,KACpBb,QAASS,EAAUT,QAAQe,UAC3Bb,KAAMO,EAAUP,KAChBG,MAAOI,EAAUJ,MACjBC,MAAOG,EAAUO,KACjBvB,IAAKgB,EAAUhB,aCkB5BwB,E,4MAlCbC,MAAQ,CACJT,UAAW,GACXU,cAAe,GACfC,OAAQ,GACRC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,YAAY,G,kEAGK,IAAD,OAElBC,IAAMC,IADM,yCAETC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZpB,UAAWmB,EAAIE,KAAKC,QACpBZ,cAAeS,EAAIE,KAAKC,aAG3BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAI5B,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE3B,UAAW4B,KAAKnB,MAAMT,iB,GA7BdrB,aCKEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.06dfd82c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav class=\"navbar navbar-light bg-light\">\r\n                <span class=\"navbar-brand mb-0 h1\">Employee Directory</span>\r\n                <form class=\"form-inline my-2 my-lg-0\">\r\n                    <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                    <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                </form>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nfunction EmployeeInfoRow(props) {\r\n    var d = new Date(props.dob.date);\r\n    var formatted_date = d.getDate() + \"-\" + (d.getMonth() + 1) + \"-\" + d.getFullYear()\r\n\r\n    return (\r\n        <tr>\r\n            <td><img src={props.picture} alt=\"employee\" /></td>\r\n            <td>{props.name.first} {props.name.last}</td>\r\n            <td>{props.email}</td>\r\n            <td>{props.phone}</td>\r\n            <td>{formatted_date}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeeInfoRow;","import React from 'react';\r\nimport EmployeeInfoRow from \"../EmployeeInfoRow/EmployeeInfoRow\"\r\n\r\nfunction Table(props) {\r\n    return (\r\n        <div class=\"table-responsive\">\r\n            <table class=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Image</th>\r\n                        <th scope=\"col\">Name <i class=\"fas fa-sort\"></i></th>\r\n                        <th scope=\"col\">Email <i class=\"fas fa-sort\"></i></th>\r\n                        <th scope=\"col\">Phone <i class=\"fas fa-sort\"></i></th>\r\n                        <th scope=\"col\">DOB <i class=\"fas fa-sort\"></i></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.employees.map(employees => (\r\n                        <EmployeeInfoRow\r\n                            key={employees.login.uuid}\r\n                            id={employees.login.uuid}\r\n                            picture={employees.picture.thumbnail}\r\n                            name={employees.name}\r\n                            email={employees.email}\r\n                            phone={employees.cell}\r\n                            dob={employees.dob}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport './App.css';\n\nimport Navbar from \"./components/Navbar/Navbar\"\nimport Table from \"./components/Table/Table\"\n\nclass App extends Component {\n\n  state = {\n      employees: [],\n      employeesData: [],\n      search: \"\",\n      sortNameAsc: true,\n      sortEmailAsc: true,\n      sortPhoneAsc: true,\n      sortDOBAsc: true\n    }\n\n  componentDidMount() {\n    const url = \"https://randomuser.me/api/?results=50\";\n    axios.get(url)\n      .then(res => {\n        this.setState({\n          employees: res.data.results,\n          employeesData: res.data.results,\n        });\n      })\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Table \n          employees={this.state.employees}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}